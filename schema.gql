# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserType {
  id: ID!
  name: String!
  email: String!
  role: RoleEnum!
  bio: String
  avatar: String
  isEmailVerified: Boolean!
}

"""The role of the user in the system"""
enum RoleEnum {
  USER
  ADMIN
}

type RegisterResponse {
  message: String!
  user: UserType!
}

type LoginResponse {
  message: String!
  accessToken: String!
}

type RefreshTokenResponse {
  accessToken: String!
  message: String!
}

type LogoutResponse {
  message: String!
}

type EmailVerificationResponse {
  message: String!
}

type RecentCommentType {
  content: String!
  authorId: String!
  authorName: String!
  commentId: String!
}

type PostType {
  id: String!
  description: String!
  authorName: String!
  authorId: String!
  image: String
  likes: Float!
  commentsCount: Float!
  recentComments: [RecentCommentType!]
  isLikedByMe: Boolean
}

type PostEdge {
  node: PostType!
  cursor: String!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type PostConnection {
  edges: [PostEdge!]!
  pageInfo: PageInfo!
}

type CreatePostResponse {
  message: String!
  post: PostType!
}

type DeletePostResponse {
  message: String!
}

type UpdatePostResponse {
  message: String!
  post: PostType!
}

type FriendshipType {
  id: ID!
  requester: ID!
  requesterName: String!
  recipient: ID!
  recipientName: String!
  status: FriendshipStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""Status of the friendship"""
enum FriendshipStatus {
  Pending
  Accepted
  Declined
  Blocked
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type FriendshipEdge {
  node: FriendshipType!
  cursor: String!
}

type FriendshipPageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type FriendshipConnection {
  edges: [FriendshipEdge!]!
  pageInfo: FriendshipPageInfo!
}

type ConversationParticipantType {
  userId: ID!
  name: String!
  avatar: String
}

type RecentMessageType {
  senderId: ID!
  senderName: String!
  senderAvatar: String
  content: String!
  createdAt: DateTime!
}

type ConversationType {
  id: ID!
  participants: [ConversationParticipantType!]!
  recentMessages: [RecentMessageType!]!
  lastMessageAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MessageType {
  id: ID!
  conversationId: ID!
  senderId: ID!
  senderName: String!
  senderAvatar: String
  content: String!
  read: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MessageEdge {
  node: MessageType!
  cursor: String!
}

type MessagePageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type MessageConnection {
  edges: [MessageEdge!]!
  pageInfo: MessagePageInfo!
}

type Query {
  check: String!
  me: String!
  posts(input: PaginationInput = {first: 5}): PostConnection!
  myPosts(input: PaginationInput = {first: 5}): PostConnection!
  myFriends(first: Int, after: String): FriendshipConnection!
  getMessages(conversationId: String!, first: Float = 10, after: String): MessageConnection!
}

input PaginationInput {
  first: Float! = 5
  after: String
}

type Mutation {
  generateEmailVerificationToken(email: String!): EmailVerificationResponse!
  verifyEmailToken: EmailVerificationResponse!
  register(input: CreateUserInput!): RegisterResponse!
  refreshAccessToken: RefreshTokenResponse!
  logout: LogoutResponse!
  login(input: LoginUserInput!): LoginResponse!
  createPost(input: CreatePostInput!): CreatePostResponse!
  deletePost(id: String!): DeletePostResponse!
  updatePost(postId: String!, input: UpdatePostInput!): UpdatePostResponse!
  likePost(postId: String!): String!
  unlikePost(postId: String!): String!
  sendFriendRequest(recipient: String!): String!
  handleFriendRequest(requesterId: String!, action: FriendRequestAction!): String!
  removeFriend(friendId: String!): String!
  createComment(input: CreateCommentInput!): String!
  deleteComment(input: DeleteCommentInput!): String!
  createMessage(conversationId: String!, content: String!): MessageType!
  createConversation(receiverId: String!): ConversationType!
  triggerCommentNotification(userId: String!, message: String!): String!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input CreatePostInput {
  description: String!
  image: Upload
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UpdatePostInput {
  description: String
  image: Upload
}

"""Action to handle a friend request (accept or decline)"""
enum FriendRequestAction {
  ACCEPT
  DECLINE
}

input CreateCommentInput {
  postId: String!
  content: String!
  parentCommentId: String = null
}

input DeleteCommentInput {
  postId: String!
  commentId: String!
}

type Subscription {
  messageAdded(conversationId: String!): MessageType!
  commentAdded(userId: String!): String!
}